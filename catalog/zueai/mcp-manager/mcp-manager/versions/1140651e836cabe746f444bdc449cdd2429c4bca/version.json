{
  "serverId": "zueai/mcp-manager/mcp-manager",
  "version": "1140651e836cabe746f444bdc449cdd2429c4bca",
  "manifest": {
    "id": "mcp-manager",
    "fullId": "zueai/mcp-manager/mcp-manager",
    "repo": {
      "provider": "github.com",
      "owner": "zueai",
      "repo": "mcp-manager",
      "branch": "main",
      "url": "https://github.com/zueai/mcp-manager"
    },
    "config": {
      "argumentsTemplate": null,
      "configValues": []
    },
    "subdirectory": "/",
    "title": "MCP Manager for Claude Desktop",
    "description": "Simple web ui to manage mcp (model context protocol) servers in the claude app"
  },
  "manifestHash": "e1e988e51a113f28d1b1722f411a69b9",
  "createdAt": "2025-04-15T07:16:49.689Z",
  "builder": [
    {
      "type": "nixpacks",
      "plan": {
        "providers": [],
        "buildImage": "ghcr.io/railwayapp/nixpacks:ubuntu-1742861060",
        "variables": {
          "CI": "true",
          "NIXPACKS_METADATA": "node",
          "NIXPACKS_SPA_OUTPUT_DIR": "dist-electron",
          "NODE_ENV": "production",
          "NPM_CONFIG_PRODUCTION": "false"
        },
        "staticAssets": {
          "Caddyfile": "# global options\n{\n\tadmin off # theres no need for the admin api in railway's environment\n\tpersist_config off # storage isn't persistent anyway\n\tauto_https off # railway handles https for us, this would cause issues if left enabled\n\t# runtime logs\n\tlog {\n\t\tformat json # set runtime log format to json mode \n\t}\n\t# server options\n\tservers {\n\t\ttrusted_proxies static private_ranges 100.0.0.0/8 # trust railway's proxy\n\t}\n}\n\n# site block, listens on the $PORT environment variable, automatically assigned by railway\n:{$PORT:3000} {\n\t# access logs\n\tlog {\n\t\tformat json # set access log format to json mode\n\t}\n\n\t# health check for railway\n\trewrite /health /*\n\n\t# serve from the 'dist' folder (Vite builds into the 'dist' folder)\n    root * ../app/{$NIXPACKS_SPA_OUTPUT_DIR}\n\n\t# enable gzipping responses\n\tencode gzip\n\n\t# serve files from 'dist'\n\tfile_server \n\n\t# if path doesn't exist, redirect it to 'index.html' for client side routing\n\ttry_files {path} /index.html\n}"
        },
        "phases": {
          "build": {
            "dependsOn": [
              "install"
            ],
            "cmds": [
              "bun run build"
            ],
            "cacheDirectories": [
              "node_modules/.cache"
            ]
          },
          "caddy": {
            "dependsOn": [
              "setup"
            ],
            "nixPkgs": [
              "caddy"
            ],
            "nixOverlays": [],
            "nixpkgsArchive": "ba913eda2df8eb72147259189d55932012df6301",
            "cmds": [
              "caddy fmt --overwrite /assets/Caddyfile"
            ]
          },
          "install": {
            "dependsOn": [
              "setup"
            ],
            "cmds": [
              "bun i --no-save"
            ],
            "cacheDirectories": [
              "/root/.bun"
            ],
            "paths": [
              "/app/node_modules/.bin"
            ]
          },
          "setup": {
            "nixPkgs": [
              "nodejs_18",
              "bun"
            ],
            "nixOverlays": [
              "https://github.com/railwayapp/nix-npm-overlay/archive/main.tar.gz"
            ],
            "nixpkgsArchive": "ffeebf0acf3ae8b29f8c7049cd911b9636efd7e7"
          }
        },
        "start": {
          "cmd": "exec caddy run --config /assets/Caddyfile --adapter caddyfile 2>&1"
        }
      }
    }
  ]
}